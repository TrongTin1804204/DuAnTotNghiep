import { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import axios from "axios";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import "../static/AddEmployee/style.css";
import cryptoRandomString from 'crypto-random-string';
import api from "../../security/Axios";
import { hasPermission } from "../../security/DecodeJWT";

export default function EditEmployee() {
    const { id } = useParams(); // L·∫•y ID t·ª´ URL
    const navigate = useNavigate();
    const [formData, setFormData] = useState({
        ten: "",
        gioiTinh: "Nam",
        ngaySinh: "",
        soDienThoai: "",
        email: "",
        vaiTro: false,
        trangThai: true,
        hinh_anh: null,
        cccd: "",
        diachi: ""
    });
    const [errors, setErrors] = useState({});
    useEffect(() => {
        if(localStorage.getItem("token")){
            if (!hasPermission("ADMIN") && !hasPermission("STAFF")) {
                navigate("/admin/login");
            }
        }
    }, [navigate]);
    const [loading, setLoading] = useState(false); // Tr·∫°ng th√°i loading

    const handleSuccess = () => {
        toast.success("S·ª≠a nh√¢n vi√™n th√†nh c√¥ng!", {
            position: "top-right",
            autoClose: 3000,
        })
    };

    const handleError = () => {
        toast.error("L·ªói khi s·ª≠a nh√¢n vi√™n!", {
            position: "top-right",
            autoClose: 3000,
        });
    };
    // üü¢ L·∫•y d·ªØ li·ªáu nh√¢n vi√™n
    useEffect(() => {
        const fetchEmployee = async () => {
            try {
                const response = await api.get(`/admin/nhan-vien/detail/${id}`);
                const data = response.data;
                data.ngaySinh = data.ngaySinh ? data.ngaySinh.split("T")[0] : "";
                setFormData(data);
            } catch (error) {
                console.error("L·ªói khi l·∫•y d·ªØ li·ªáu nh√¢n vi√™n:", error);
            }
        };
        fetchEmployee();
    }, [id]);

    // X·ª≠ l√Ω thay ƒë·ªïi input
    const handleChange = (e) => {
        const { name, value, type, checked } = e.target;
        setFormData({
            ...formData,
            [name]: name === "vaiTro" || name === "trangThai" ? value === "true" : type === "checkbox" ? checked : value,
        });
    };

    const [soNha, setSoNha] = useState("");
    const [provinces, setProvinces] = useState([]);
    const [districts, setDistricts] = useState([]);
    const [wards, setWards] = useState([]);
    const [selectedProvince, setSelectedProvince] = useState("");
    const [selectedDistrict, setSelectedDistrict] = useState("");
    const [selectedWard, setSelectedWard] = useState("");

    useEffect(() => {
        const fetchProvinces = async () => {
            try {
                const response = await axios.get("https://provinces.open-api.vn/api/p");
                setProvinces(response.data);
            } catch (error) {
                console.error("L·ªói khi l·∫•y danh s√°ch t·ªânh th√†nh:", error);
            }
        };
        fetchProvinces();
    }, []);

    const handleProvinceChange = async (e) => {
        const provinceId = e.target.value;
        setSelectedProvince(provinceId);
        setSelectedDistrict("");
        setSelectedWard("");
        setWards([]);

        try {
            const response = await axios.get(`https://provinces.open-api.vn/api/p/${provinceId}?depth=2`);
            setDistricts(response.data.districts);
        } catch (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch qu·∫≠n huy·ªán:", error);
        }
    };

    const handleDistrictChange = async (e) => {
        const districtId = e.target.value;
        setSelectedDistrict(districtId);
        setSelectedWard("");

        try {
            const response = await axios.get(`https://provinces.open-api.vn/api/d/${districtId}?depth=2`);
            setWards(response.data.wards);
        } catch (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch x√£ ph∆∞·ªùng:", error);
        }
    };

    const handleWardChange = (e) => {
        setSelectedWard(e.target.value);
    };

    useEffect(() => {
        if (soNha && selectedProvince && selectedDistrict && selectedWard) {
            const provinceName = provinces.find((p) => p.code === Number(selectedProvince))?.name || "";
            const districtName = districts.find((d) => d.code === Number(selectedDistrict))?.name || "";
            const wardName = wards.find((w) => w.code === Number(selectedWard))?.name || "";
            const fullAddress = `${soNha}, ${wardName}, ${districtName}, ${provinceName}`;
            setFormData((prev) => ({
                ...prev,
                diachi: fullAddress,
            }));
        }
    }, [soNha, selectedProvince, selectedDistrict, selectedWard, provinces, districts, wards]);

    useEffect(() => {
        const fetchEmployee = async () => {
            try {
                const response = await api.get(`/admin/nhan-vien/detail/${id}`);
                const data = response.data;
                data.ngaySinh = data.ngaySinh ? data.ngaySinh.split("T")[0] : "";

                // üü¢ T√°ch ƒë·ªãa ch·ªâ th√†nh s·ªë nh√†, t·ªânh, huy·ªán, x√£
                if (data.diachi) {
                    const parts = data.diachi.split(", ").reverse();
                    const provinceName = parts[0];
                    const districtName = parts[1];
                    const wardName = parts[2];
                    const houseNumber = parts.slice(3).reverse().join(", "); // Gh√©p l·∫°i ph·∫ßn c√≤n l·∫°i

                    setSoNha(houseNumber);

                    // üü¢ T√¨m t·ªânh theo t√™n
                    const province = provinces.find((p) => p.name === provinceName);
                    if (province) {
                        setSelectedProvince(province.code);

                        // üü¢ G·ªçi API l·∫•y qu·∫≠n/huy·ªán c·ªßa t·ªânh
                        const districtRes = await axios.get(`https://provinces.open-api.vn/api/p/${province.code}?depth=2`);
                        setDistricts(districtRes.data.districts);

                        // üü¢ T√¨m huy·ªán theo t√™n
                        const district = districtRes.data.districts.find((d) => d.name === districtName);
                        if (district) {
                            setSelectedDistrict(district.code);

                            // üü¢ G·ªçi API l·∫•y x√£/ph∆∞·ªùng c·ªßa huy·ªán
                            const wardRes = await axios.get(`https://provinces.open-api.vn/api/d/${district.code}?depth=2`);
                            setWards(wardRes.data.wards);

                            // üü¢ T√¨m x√£ theo t√™n
                            const ward = wardRes.data.wards.find((w) => w.name === wardName);
                            if (ward) {
                                setSelectedWard(ward.code);
                            }
                        }
                    }
                }

                setFormData(data);
            } catch (error) {
                console.error("L·ªói khi l·∫•y d·ªØ li·ªáu nh√¢n vi√™n:", error);
            }
        };

        fetchEmployee();
    }, [id, provinces]);


    // X·ª≠ l√Ω upload ·∫£nh l√™n Cloudinary khi ch·ªçn file
    const handleFileChange = async (e) => {
        const file = e.target.files[0];
        if (!file) return;

        const imageFormData = new FormData();
        imageFormData.append("file", file);
        imageFormData.append("upload_preset", "upload_images"); // Thay b·∫±ng upload_preset t·ª´ Cloudinary

        try {
            const response = await axios.post(
                `https://api.cloudinary.com/v1_1/dabnimezp/image/upload`,
                imageFormData
            );
            setFormData((prev) => ({
                ...prev,
                hinh_anh: response.data.secure_url, // L∆∞u URL thay v√¨ file
            }));
        } catch (error) {
            console.error("L·ªói khi upload ·∫£nh:", error);
            alert("T·∫£i ·∫£nh l√™n th·∫•t b·∫°i!");
        }
    };

    // Validation d·ªØ li·ªáu
    const validate = () => {
        let newErrors = {};
        if (!formData.ten.trim()) newErrors.ten = "T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!";

        if (!formData.ngaySinh) {
            newErrors.ngaySinh = "Vui l√≤ng ch·ªçn ng√†y sinh!";
        } else {
            const birthDate = new Date(formData.ngaySinh);
            const today = new Date();
            const age = today.getFullYear() - birthDate.getFullYear();
            if (age < 18) {
                newErrors.ngaySinh = "Nh√¢n vi√™n ph·∫£i t·ª´ 18 tu·ªïi tr·ªü l√™n!";
            }
        }

        if (!/^\d{12}$/.test(formData.cccd)) newErrors.cccd = "CCCD ph·∫£i l√† 12 ch·ªØ s·ªë!";

        if (!/^0\d{9}$/.test(formData.soDienThoai)) newErrors.soDienThoai = "S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10 s·ªë v√† b·∫Øt ƒë·∫ßu b·∫±ng 0!";

        if (!formData.email.trim()) newErrors.email = "Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!";

        if (!formData.diachi.trim()) newErrors.diachi = "ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!";

        if (!selectedProvince || selectedProvince === "") newErrors.selectedProvince = "Vui l√≤ng ch·ªçn T·ªânh/Th√†nh ph·ªë!";
        if (!selectedDistrict || selectedDistrict === "") newErrors.selectedDistrict = "Vui l√≤ng ch·ªçn Qu·∫≠n/Huy·ªán!";
        if (!selectedWard || selectedWard === "") newErrors.selectedWard = "Vui l√≤ng ch·ªçn X√£/Ph∆∞·ªùng!";
        if (!soNha.trim()) {
            newErrors.soNha = "S·ªë nh√† kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!";
        }
        setErrors(newErrors);
        if (Object.keys(newErrors).length > 0) {
            handleError();
        }
        return Object.keys(newErrors).length === 0;
    };

    // üü¢ C·∫≠p nh·∫≠t nh√¢n vi√™n
    const handleSubmit = async (e) => {
        e.preventDefault();
        console.log("D·ªØ li·ªáu g·ª≠i ƒëi:", JSON.stringify(formData));
        if (!validate()) return;

        setErrors({});
        setLoading(true);

        try {
            const response = await api.put(`/admin/nhan-vien/sua/${id}`, formData);
            if (response.status === 200) {
                toast.success("C·∫≠p nh·∫≠t nh√¢n vi√™n th√†nh c√¥ng!", {
                    position: "top-right",
                    autoClose: 3000,
                })
                navigate("/admin/employees");
            }
        } catch (error) {
            if (error.response && error.response.status === 400) {
                setErrors(error.response.data); // L∆∞u l·ªói v√†o state
            } else {
                console.error("L·ªói khi c·∫≠p nh·∫≠t nh√¢n vi√™n:", error);
                toast.error("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!", { position: "top-right", autoClose: 3000, });
            }
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="p-6 space-y-4">
            <h2 className="text-lg font-semibold">TH√äM M·ªöI NH√ÇN VI√äN</h2>
            <form onSubmit={handleSubmit} className="bg-white p-4 rounded-lg shadow-md">
                <div className="grid grid-cols-2 gap-6">
                    {/* C·ªôt 1 */}
                    <div className="space-y-4">
                        <div>
                            <label className="block">T√™n</label>
                            <input type="text" name="ten" value={formData.ten} onChange={handleChange} className="border p-2 w-full" />
                            {errors.ten && <p className="text-red-500 text-sm">{errors.ten}</p>}
                        </div>
                        <div>
                            <label className="block">Ng√†y sinh</label>
                            <input type="date" name="ngaySinh" value={formData.ngaySinh} onChange={handleChange} className="border p-2 w-full" />
                            {errors.ngaySinh && <p className="text-red-500 text-sm">{errors.ngaySinh}</p>}
                        </div>
                        <div>
                            <label className="block">CƒÉn c∆∞·ªõc c√¥ng d√¢n</label>
                            <input type="text" name="cccd" value={formData.cccd} onChange={handleChange} className="border p-2 w-full" />
                            {errors.cccd && <p className="text-red-500 text-sm">{errors.cccd}</p>}
                        </div>
                        <div>
                            <label className="block">Gi·ªõi t√≠nh</label>
                            <label className="inline-flex items-center">
                                <input type="radio" name="gioiTinh" value="Nam" checked={formData.gioiTinh === "Nam"} onChange={handleChange} className="form-radio" />
                                <span className="ml-2">Nam</span>
                            </label>
                            <label className="inline-flex items-center ml-4">
                                <input type="radio" name="gioiTinh" value="N·ªØ" checked={formData.gioiTinh === "N·ªØ"} onChange={handleChange} className="form-radio" />
                                <span className="ml-2">N·ªØ</span>
                            </label>
                        </div>
                        <div>
                            <label className="block">Email</label>
                            <input type="email" name="email" value={formData.email} onChange={handleChange} className="border p-2 w-full" />
                            {errors.email && <p className="text-red-500 text-sm">{errors.email}</p>}
                        </div>
                        <div>
                            <label className="block">S·ªë ƒëi·ªán tho·∫°i</label>
                            <input type="text" name="soDienThoai" value={formData.soDienThoai} onChange={handleChange} className="border p-2 w-full" />
                            {errors.soDienThoai && <p className="text-red-500 text-sm">{errors.soDienThoai}</p>}
                        </div>
                        <div>
                            <label className="block">Vai tr√≤</label>
                            <select name="vaiTro" value={formData.vaiTro} onChange={handleChange} className="border p-2 w-full">
                                <option value="false">Nh√¢n vi√™n</option>
                                <option value="true">Qu·∫£n l√Ω</option>
                            </select>
                        </div>

                        <div>
                            <label className="block">Tr·∫°ng th√°i</label>
                            <select name="trangThai" value={formData.trangThai} onChange={handleChange} className="border p-2 w-full">
                                <option value="true">Ho·∫°t ƒë·ªông</option>
                                <option value="false">Ng·ª´ng ho·∫°t ƒë·ªông</option>
                            </select>
                        </div>
                    </div>

                    {/* C·ªôt 2 */}
                    <div className="space-y-4">
                        <div>
                            <label className="block">·∫¢nh ƒë·∫°i di·ªán</label>
                            <input type="file" accept="image/*" name="hinh_anh" onChange={handleFileChange} className="border p-2 w-full" />
                            {formData.hinh_anh && <img src={formData.hinh_anh} alt="·∫¢nh ƒë√£ ch·ªçn" className="w-32 h-32 object-cover mt-2" />}
                        </div>
                        <div>
                            <h1 className="font-semibold">Ch·ªçn ƒê·ªãa Ch·ªâ</h1>

                            <div>
                                <label>T·ªânh/Th√†nh Ph·ªë:</label>
                                <select value={selectedProvince} onChange={handleProvinceChange} className="border p-2 w-full">
                                    {selectedProvince === "" && <option value="">Ch·ªçn t·ªânh/th√†nh ph·ªë</option>}
                                    {provinces.map((province) => (
                                        <option key={province.code} value={province.code}>{province.name}</option>
                                    ))}
                                </select>
                                {errors.selectedProvince && <p className="text-red-500 text-sm">{errors.selectedProvince}</p>}
                            </div>

                            <div>
                                <label>Qu·∫≠n/Huy·ªán:</label>
                                <select value={selectedDistrict} onChange={handleDistrictChange} disabled={!selectedProvince} className="border p-2 w-full">
                                    {selectedDistrict === "" && <option value="">Ch·ªçn qu·∫≠n/huy·ªán</option>}
                                    {districts.map((district) => (
                                        <option key={district.code} value={district.code}>{district.name}</option>
                                    ))}
                                </select>
                                {errors.selectedDistrict && <p className="text-red-500 text-sm">{errors.selectedDistrict}</p>}
                            </div>

                            <div>
                                <label>X√£/Ph∆∞·ªùng:</label>
                                <select value={selectedWard} onChange={handleWardChange} disabled={!selectedDistrict} className="border p-2 w-full">
                                    {selectedWard === "" && <option value="">Ch·ªçn x√£/ph∆∞·ªùng</option>}
                                    {wards.map((ward) => (
                                        <option key={ward.code} value={ward.code}>{ward.name}</option>
                                    ))}
                                </select>
                                {errors.selectedWard && <p className="text-red-500 text-sm">{errors.selectedWard}</p>}
                            </div>
                        </div>
                        <div>
                            <label>S·ªë nh√†:</label>
                            <input type="text" value={soNha} onChange={(e) => setSoNha(e.target.value)} className="border p-2 w-full" placeholder="Nh·∫≠p s·ªë nh√†, th√¥n, x√≥m" />
                            {errors.soNha && <p className="text-red-500 text-sm">{errors.soNha}</p>}
                        </div>
                    </div>
                </div>

                {/* Buttons */}
                <div className="flex space-x-4 mt-6">
                    <button type="submit" disabled={loading} className="bg-blue-500 text-white p-2 rounded-md">  {loading ? "ƒêang c·∫≠p nh·∫≠t..." : "C·∫≠p nh·∫≠t"}</button>
                    <button type="button" onClick={() => navigate("/admin/employees")} className="bg-gray-500 text-white p-2 rounded-md">H·ªßy</button>
                </div>
            </form>
            {/* Loading Overlay */}
            {loading && (
                <div className="loading-overlay">
                    <div className="loading-spinner"></div>
                </div>
            )}

            <ToastContainer />
        </div>
    );
}
